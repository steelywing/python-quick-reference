{"name":"Python-quick-reference","tagline":"","body":"Python 3 — Quick Reference\r\n==========================\r\n## Basic\r\n```py\r\na, b, c = 1, 2, 3\r\n# a = 1, b = 2, c = 3\r\n\r\n1 < 2 < 3\r\n# => True\r\n```\r\n\r\n## Data type\r\n\r\n### Numbers\r\n```py\r\n1 + 1\r\n# => 2\r\n\r\n2 - 1\r\n# => 1\r\n\r\n2 * 2\r\n# => 4\r\n\r\n3 / 2 # division\r\n# => 1.5\r\n\r\n3 // 2 # floor division\r\n# => 1\r\n\r\n3 % 2 # remainder of division\r\n# => 1\r\n\r\n4 ** 2 # power\r\npow(4, 2)\r\n# => 16\r\n\r\nint(1.2)\r\n# => 1\r\n\r\nfloat(1)\r\n# => 1.0\r\n```\r\n\r\n### Bitwise Operations\r\n```py\r\n~x # inverted\r\nx | y # or\r\nx & y # and\r\nx ^ y # exclusive\r\nx << n # shifted left by n bits\r\nx >> n # shifted right by n bits\r\n```\r\n\r\n### Strings\r\n```py\r\n\"string\\n\" == 'string\\n'\r\n# => True\r\n\r\nr'raw \\n string'\r\n# => 'raw \\\\n string'\r\n\r\n'A' + 'B'\r\n# => 'AB'\r\n\r\n'AB' * 2\r\n# => 'ABAB'\r\n\r\n\"\"\"multiple\r\nline\"\"\"\r\n# => 'multiple\\nline'\r\n\r\n'''\\\r\nmultiple\r\nline'''\r\n# => 'multiple\\nline'\r\n\r\n','.join([1, 2, 3, 4])\r\n# => '1,2,3,4'\r\n\r\nlen('1234')\r\n# => 4\r\n\r\n'%s has %d feet' % ('Chick', 2)\r\n# => 'Chick has 2 feet'\r\n\r\n'{} has {} feet'.format('Chick', 2)\r\n# => 'Chick has 2 feet'\r\n\r\n'1 Foot = {0} {1}, 1 {1} = {2} cm'.format(12, 'Inch', 2.54)\r\n# => '1 Foot = 12 Inch, 1 Inch = 2.54 cm'\r\n```\r\n\r\n### Lists\r\n```py\r\narray = ['A', 'B', 'C', 'D']\r\n\r\nlen(array)\r\n# => 4\r\n\r\narray[0]\r\n# => 'A'\r\n\r\narray[-1]\r\n# => 'D'\r\n\r\narray[1:3] # return #2 (include) to #4 (exclude) items\r\n# => ['B', 'C']\r\n\r\narray[1:]\r\n# => ['B', 'C', 'D']\r\n\r\narray[:] # shallow copy\r\n# => ['A', 'B', 'C', 'D']\r\n\r\narray.copy() # shallow copy\r\n# => ['A', 'B', 'C', 'D']\r\n\r\n'B' in array\r\n# => True\r\n\r\n'E' not in array\r\n# => True\r\n\r\narray.index('B') # return index of the first match\r\n# => 1\r\n\r\n['A', 'B'] + ['C', 'D']\r\n# => ['A', 'B', 'C', 'D']\r\n\r\n['A', 'B'] * 2\r\n# => ['A', 'B', 'A', 'B']\r\n\r\narray[0:3] = ['E', 'F'] # splice\r\n# array = ['E', 'F', 'D']\r\n\r\narray.append('G')\r\n# array = ['E', 'F', 'D', 'G']\r\n\r\narray.insert(1, 'H')\r\n# array = ['E', 'H', 'F', 'D', 'G']\r\n\r\ndel array[0] # remove\r\n# array = ['H', 'F', 'D', 'G']\r\n\r\ndel array[1:3] # remove\r\n# array = ['H', 'G']\r\n\r\narray.extend(['H', 'I'])\r\n# array = ['H', 'G', 'H', 'I']\r\n\r\narray.remove('H') # remove first matching item\r\n# array = ['G', 'H', 'I']\r\n\r\narray.pop()\r\n# => 'I', array = ['G', 'H']\r\n\r\narray = [6, 4, 8, 2]\r\n\r\narray.sort()\r\n# array = [2, 4, 6, 8]\r\n\r\narray.reverse()\r\n# array = [8, 6, 4, 2]\r\n\r\nlist(enumerate(['A', 'B', 'C']))\r\n# => [(0, 'A'), (1, 'B'), (2, 'C')]\r\n\r\nfor i, v in enumerate(['A', 'B', 'C']):\r\n\tprint(i, v)\r\n# 0 A\r\n# 1 B\r\n# 2 C\r\n```\r\n\r\n### List Comprehensions\r\n```py\r\n[n for n in range(4)]\r\n# => [0, 1, 2, 3]\r\n```\r\n\r\n```py\r\narray = [n*2 for n in range(8) if n%2 == 0]\r\n# array = [0, 4, 8, 12]\r\n```\r\nis same as\r\n```py\r\narray = []\r\nfor n in range(8):\r\n    if n%2 == 0:\r\n        array.append(n*2)\r\n```\r\n\r\n### Tuples (Immutable Lists)\r\n```py\r\ntuple([1, 2, 3])\r\n(1, 2, 3)\r\n(1,)\r\n()\r\n```\r\n\r\n### Sets\r\n```py\r\n{1, 2, 3, 4}\r\nset([1, 2, 3, 2, 3, 4])\r\n# => {1, 2, 3, 4}\r\n\r\n'A' in {'A', 'B', 'C'}\r\n# => True\r\n\r\n'D' not in {'A', 'B', 'C'}\r\n# => True\r\n\r\n{1, 2} | {2, 3}\r\n{1, 2}.union({2, 3})\r\n# => {1, 2, 3}\r\n\r\n{1, 2} & {2, 3}\r\n{1, 2}.intersection({2, 3})\r\n# => {2}\r\n\r\n{1, 2} - {2, 3}\r\n{1, 2}.difference({2, 3})\r\n# => {1}\r\n\r\n{1, 2} ^ {2, 3}\r\n{1, 2}.symmetric_difference({2, 3})\r\n# => {1, 3}\r\n\r\n{1, 2}.isdisjoint({3, 4}) # no common elements\r\n# => True\r\n\r\n{1, 2}.issubset({1, 2, 3})\r\n{1, 2} <= {1, 2, 3}\r\n{1, 2} <= {1, 2}\r\n# => True\r\n\r\n{1, 2} < {1, 2, 3}\r\n# => True\r\n\r\n{1, 2} < {1, 2}\r\n# => False\r\n\r\n{1, 2, 3}.issuperset({1, 2})\r\n{1, 2, 3} >= {1, 2}\r\n{1, 2} >= {1, 2}\r\n# => True\r\n\r\n{1, 2, 3} > {1, 2}\r\n# => True\r\n\r\n{1, 2} > {1, 2}\r\n# => False\r\n\r\n{1, 2, 3}.copy() # shallow copy\r\n# => {1, 2, 3}\r\n```\r\n\r\n### Frozensets (Immutable Sets)\r\n```py\r\nfrozenset([1, 2, 3, 2, 3, 4])\r\n# => frozenset({1, 2, 3, 4})\r\n```\r\n\r\n### Dictionaries\r\n```py\r\n{'a': 1, 'b': 2}\r\ndict(a=1, b=2)\r\ndict([('a', 1), ('b', 2)])\r\n# => {'b': 2, 'a': 1}\r\n\r\ndictionary = {'a': 1, 'b': 2, 'c': 3}\r\n\r\nlist(dictionary)\r\nlist(dictionary.keys())\r\n# => ['b', 'a', 'c']\r\n\r\nsorted(dictionary.keys())\r\n# => ['a', 'b', 'c']\r\n\r\nlist(dictionary.values())\r\n# => [2, 1, 3]\r\n\r\n'a' in dictionary\r\n# => True\r\n\r\n'd' not in dictionary\r\n# => True\r\n\r\nfor k, v in dictionary.items():\r\n    print(k, v)\r\n# b 2\r\n# a 1\r\n# c 3\r\n\r\nfor key in sorted(dictionary.keys()):\r\n    print(key, dictionary[key])\r\n# a 1\r\n# b 2\r\n# c 3\r\n\r\n{x: x**2 for x in range(4)}\r\n# => {0: 0, 1: 1, 2: 4, 3: 9}\r\n```\r\n\r\n### Functions\r\n```py\r\ndef foo(arg, kw_arg='default', *args, **kw_args) -> 'Annotation':\r\n    \"\"\"Documentation\"\"\"\r\n    # type(args) == tuple\r\n    # type(kw_args) == dict\r\n    return arg, kw_arg, args, kw_args\r\n\r\nfoo.__doc__\r\n# => 'Documentation'\r\n\r\nfoo('arg')\r\n# => ('arg', 'default', (), {})\r\n\r\nfoo('arg', 'kw_arg', 'arbitrary', 'argument', a=1, b=2)\r\n# => ('arg', 'kw_arg', ('arbitrary', 'argument'), {'a': 1, 'b': 2})\r\n\r\nargs = ['arg', 'kw_arg', 'arbitrary', 'argument']\r\nkw_args = {'a': 1, 'b': 2}\r\nfoo(*args, **kw_args) # unpacking arguments\r\n# => ('arg', 'kw_arg', ('arbitrary', 'argument'), {'a': 1, 'b': 2})\r\n```\r\n\r\n### Classes\r\n```py\r\nclass BaseClass:\r\n\tpass\r\n\r\nclass Foo(BaseClass):\r\n    \"\"\"Class Documentation\"\"\"\r\n    \r\n    # Class attribute (Class variable)\r\n    # Count of instances\r\n    count = 0\r\n    \r\n    @classmethod\r\n    def get_count(cls):\r\n        return cls.count\r\n    \r\n    def __init__(self, data=None):\r\n        \"\"\"Initialize method\"\"\"\r\n        # Data attribute (Instance variable)\r\n        self.data = data\r\n        self.__class__.count++\r\n    \r\n    def get_data(self):\r\n        \"\"\"Instance method\"\"\"\r\n        return self.data\r\n    \r\n    def set_data(self, data):\r\n        \"\"\"Instance method\"\"\"\r\n        self.data = data\r\n```\r\n\r\nInput/output\r\n\r\nPrinting:\r\n\r\nstr(x)                                # human readable representation\r\nrepr(x)                               # interpretable representation\r\n\r\nFile access:\r\n\r\nf = open(\"test.txt\", \"w\")             # r / r+ / rb / rb+ / w / wb\r\nf.write(\"Ala ma kota\\n\")\r\nf.close()\r\n\r\nfor line in open(\"test.txt\"): print(line, end=\"\")\r\n\r\nL = open(\"test.txt\").readlines()      # returns a list of lines\r\n\r\nExclusive access:\r\n\r\nf = os.fdopen(os.open(\"test.txt\", os.O_WRONLY|os.O_EXCL), \"w\")\r\n\r\nInput:\r\n\r\nx = raw_input(\"Name: \")\r\nfor line in sys.stdin: print(line)\r\n\r\nString buffers:\r\n\r\nfrom StringIO import StringIO\r\nbuf = StringIO()\r\nsys.stdout = buf\r\nprint(\"Hello\")\r\nx = buf.getvalue()\r\n\r\nError stream:\r\n\r\nprint(\"Error!\", file=sys.stderr, flush=True)\r\n\r\nOther file operations:\r\n\r\nos.rename(from, to)                  os.remove(path)\r\nos.chmod(file, 0700)                 os.stat(file)\r\n\r\nSpecial names\r\n\r\n__name__\r\n    name of the file being run not imported\r\n\r\nTypical usage:\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Do something)\r\n\r\nExceptions\r\n\r\ntry:\r\n    raise TypeError(\"arg\")\r\nexcept (RuntimeError, NameError):\r\n    pass                              # empty instruction (NOP)\r\nexcept:\r\n    info = sys.exc_info()\r\n    print(info[0])\r\n    print(info[1])\r\n    traceback.print_tb(info[2])\r\n    raise\r\nelse:\r\n    ...                               # no exception but before finally\r\nfinally:                              # on the way out\r\n    ...                               # unhandled exc, release resources\r\n\r\nObject-oriented programming\r\n\r\nclass Person:\r\n    ID = 0                            # zmienna statyczna\r\n    def __init__(self, name, age=0):\r\n        self.name = name\r\n        self.age  = age\r\n    def lastName(self):\r\n        return self.name.split()[-1]\r\n    def __str__(self):\r\n        return \"{}({},{})\".format(self.__class__.__name__,\r\n                                  self.name, self.age)\r\n\r\nclass Worker(Person):\r\n    def __init__(self, name, position, age=0):\r\n        super().__init__(name, age)\r\n        self.position = position\r\n    def __str__(self):\r\n        return \"{}({},{},{})\".format(self.__class__.__name__,\r\n                                   self.name, self.position, self.age)\r\n\r\nbob = Worker(\"Bob Smith\", \"developer\", 25)\r\nprint(bob)\r\n\r\nUseful APIs\r\n\r\nQueues:\r\n\r\nQ = collections.deque([10,20,30])\r\nQ.append(40)\r\nQ.popleft()\r\n\r\nPickling:\r\n\r\nf = open(\"myobj.dat\", \"w\")\r\npickle.dump(x, f)\r\nf = open(\"myobj.dat\", \"r\")\r\nx = pickle.load(f)\r\n\r\nDatabases:\r\n\r\nconn = sqlite3.connect(\"data.db\")\r\nc = conn.cursor()\r\nc.execute(\"SELECT * FROM employees\")\r\nfor row in c:\r\n    print(row[0])\r\nconn.commit()\r\nconn.close()\r\n\r\ndb = shelve.open(\"file\")\r\ndb[\"x\"] = y\r\ndb.close()\r\n\r\nCGI:\r\n\r\nform = cgi.FieldStorage()\r\nprint(\"Content-type: text/html\\n\")\r\nprint(cgi.escape(form[\"user\"].value))\r\n\r\nHTTP Server:\r\n\r\nsrvraddr = (\"\", 8080)                 # my hostname, portnumber\r\nsrvrobj  = BaseHTTPServer.HTTPServer(srvraddr,\r\n                                     CGIHTTPServer.CGIHTTPRequestHandler)\r\nsrvrobj.serve_forever()\r\n\r\nURLs:\r\n\r\nconn = urllib.urlopen(\"http://localhost:8080\")\r\nreply = conn.read()\r\n\r\nEnvironment\r\n\r\nEncoding:\r\n\r\n#!/usr/bin/python3\r\n# -*- coding: latin-2 -*-\r\n\r\nWindows — use .pyw extension to run the script (with GUI) without a console window.\r\n\r\nPaths:\r\n\r\nPYTHONPATH\r\nexport PYTHONSTARTUP=~/.pythonrc.py\r\n\r\nModule sys:\r\n\r\nsys.argv      sys.stdin       sys.stdout      sys.stderr\r\nsys.path      sys.platform    sys.version\r\n\r\nProcesses (module subprocess):\r\n\r\nres = subprocess.call([\"hostname\",\"-f\"], stderr=subprocess.DEVNULL)\r\nres = subprocess.call(\"ps axu | grep ^root\", shell=True)\r\noutput = subprocess.check_output([\"mycmd\", \"myarg\"],universal_newlines=True)\r\n\r\nModule os:\r\n\r\nos.pathsep    os.sep          os.pardir       os.curdir       os.linesep\r\nos.startfile(\"index.html\")\r\nos.popen(\"ps ax\").readlines()\r\nos.listdir(\"/usr/local\")              # ['bin', 'etc', ...]\r\nos.glob(\"*.txt\")                      # ['test.txt', 'out.txt', ...]\r\n\r\nModule os.path:\r\n\r\nos.path.split(\"/usr/bin/go.sh\")       # ('/usr/bin', 'go.sh')\r\nos.path.join(\"/usr/bin\", \"go.sh\")     # '/usr/bin/go.sh'\r\nos.path.splitext(\"/usr/bin/go.sh\")    # ('/usr/bin/go', '.sh')\r\nos.path.abspath(\"../bin/go.sh\")       # '/usr/bin/go.sh'\r\nos.path.isfile(\"go.sh\")\r\n\r\nModule os.environ:\r\n\r\nos.environ.get(\"PYTHONSTARTUP\")\r\n\r\nDirectories:\r\n\r\nfor (dir, subdirs, files) in os.walk(\"/tmp\"):\r\n    for f in files: print(f)\r\n\r\nFunctional programming\r\n\r\nf = lambda x: x+10                    # creates an anonymous function\r\nf(5)                                  # returns 15\r\nL = [1, 4, 7]\r\nfor x in filter(lambda i: i<5, L):    # returns [1, 4]\r\nfor x in map(lambda: x: x*2, L):      # returns [2, 8, 14]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}